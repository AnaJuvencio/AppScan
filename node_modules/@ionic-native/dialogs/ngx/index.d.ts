import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface DialogsPromptCallback {
    /**
     * The index of the pressed button. (Number) Note that the index uses one-based indexing, so the value is 1, 2, 3, etc.
     */
    buttonIndex: number;
    /**
     * The text entered in the prompt dialog box. (String)
     */
    input1: string;
}
/**
 * @name Dialogs
 * @description
 * This plugin gives you ability to access and customize the device native dialogs.
 *
 * Requires Cordova plugin: `cordova-plugin-dialogs`. For more info, please see the [Dialogs plugin docs](https://github.com/apache/cordova-plugin-dialogs).
 *
 * @usage
 * ```typescript
 * import { Dialogs } from '@ionic-native/dialogs/ngx';
 *
 * constructor(private dialogs: Dialogs) { }
 *
 * ...
 *
 * this.dialogs.alert('Hello world')
 *   .then(() => console.log('Dialog dismissed'))
 *   .catch(e => console.log('Error displaying dialog', e));
 *
 *
 * ```
 * @interfaces
 * DialogsPromptCallback
 */
export declare class Dialogs extends IonicNativePlugin {
    /**
     * Shows a custom alert or dialog box.
     * @param {string} message Dialog message.
     * @param {string} [title] Dialog title. (Optional, defaults to Alert)
     * @param {string} [buttonName] Button name. (Optional, defaults to OK)
     * @returns {Promise<any>} Returns a blank promise once the user has dismissed the alert.
     */
    alert(message: string, title?: string, buttonName?: string): Promise<any>;
    /**
     * Displays a customizable confirmation dialog box.
     * @param {string} message Dialog message.
     * @param {string} [title] Dialog title. (Optional, defaults to Confirm)
     * @param {string[]} [buttonLabels] Array of strings specifying button labels. (Optional, defaults to [OK,Cancel])
     * @returns {Promise<number>} Returns a promise that resolves the button index that was clicked, or 0 if the user has dismissed the dialog by clicking outside the dialog box. Note that the index use one-based indexing.
     */
    confirm(message: string, title?: string, buttonLabels?: string[]): Promise<number>;
    /**
     * Displays a native dialog box that is more customizable than the browser's prompt function.
     * @param {string} [message] Dialog message.
     * @param {string} [title] Dialog title. (Optional, defaults to Prompt)
     * @param {string[]} [buttonLabels]  Array of strings specifying button labels. (Optional, defaults to ["OK","Cancel"])
     * @param {string} [defaultText] Default text box input value.  (Optional, Default: empty string)
     * @returns {Promise<DialogsPromptCallback>} Returns a promise that resolves an object with the button index clicked and the text entered
     */
    prompt(message?: string, title?: string, buttonLabels?: string[], defaultText?: string): Promise<DialogsPromptCallback>;
    /**
     * The device plays a beep sound.
     * @param {numbers} times The number of times to repeat the beep.
     */
    beep(times: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Dialogs, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Dialogs>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmV4cG9ydCBpbnRlcmZhY2UgRGlhbG9nc1Byb21wdENhbGxiYWNrIHtcbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIHByZXNzZWQgYnV0dG9uLiAoTnVtYmVyKSBOb3RlIHRoYXQgdGhlIGluZGV4IHVzZXMgb25lLWJhc2VkIGluZGV4aW5nLCBzbyB0aGUgdmFsdWUgaXMgMSwgMiwgMywgZXRjLlxuICAgICAqL1xuICAgIGJ1dHRvbkluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgZW50ZXJlZCBpbiB0aGUgcHJvbXB0IGRpYWxvZyBib3guIChTdHJpbmcpXG4gICAgICovXG4gICAgaW5wdXQxOiBzdHJpbmc7XG59XG4vKipcbiAqIEBuYW1lIERpYWxvZ3NcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZ2l2ZXMgeW91IGFiaWxpdHkgdG8gYWNjZXNzIGFuZCBjdXN0b21pemUgdGhlIGRldmljZSBuYXRpdmUgZGlhbG9ncy5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWRpYWxvZ3NgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbRGlhbG9ncyBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERpYWxvZ3MgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2RpYWxvZ3Mvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZ3M6IERpYWxvZ3MpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuZGlhbG9ncy5hbGVydCgnSGVsbG8gd29ybGQnKVxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnRGlhbG9nIGRpc21pc3NlZCcpKVxuICogICAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZygnRXJyb3IgZGlzcGxheWluZyBkaWFsb2cnLCBlKSk7XG4gKlxuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIERpYWxvZ3NQcm9tcHRDYWxsYmFja1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEaWFsb2dzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIFNob3dzIGEgY3VzdG9tIGFsZXJ0IG9yIGRpYWxvZyBib3guXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgRGlhbG9nIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gRGlhbG9nIHRpdGxlLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIEFsZXJ0KVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYnV0dG9uTmFtZV0gQnV0dG9uIG5hbWUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gT0spXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIGJsYW5rIHByb21pc2Ugb25jZSB0aGUgdXNlciBoYXMgZGlzbWlzc2VkIHRoZSBhbGVydC5cbiAgICAgKi9cbiAgICBhbGVydChtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBidXR0b25OYW1lPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXlzIGEgY3VzdG9taXphYmxlIGNvbmZpcm1hdGlvbiBkaWFsb2cgYm94LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIERpYWxvZyBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBDb25maXJtKVxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtidXR0b25MYWJlbHNdIEFycmF5IG9mIHN0cmluZ3Mgc3BlY2lmeWluZyBidXR0b24gbGFiZWxzLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIFtPSyxDYW5jZWxdKVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdGhlIGJ1dHRvbiBpbmRleCB0aGF0IHdhcyBjbGlja2VkLCBvciAwIGlmIHRoZSB1c2VyIGhhcyBkaXNtaXNzZWQgdGhlIGRpYWxvZyBieSBjbGlja2luZyBvdXRzaWRlIHRoZSBkaWFsb2cgYm94LiBOb3RlIHRoYXQgdGhlIGluZGV4IHVzZSBvbmUtYmFzZWQgaW5kZXhpbmcuXG4gICAgICovXG4gICAgY29uZmlybShtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBidXR0b25MYWJlbHM/OiBzdHJpbmdbXSk6IFByb21pc2U8bnVtYmVyPjtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5cyBhIG5hdGl2ZSBkaWFsb2cgYm94IHRoYXQgaXMgbW9yZSBjdXN0b21pemFibGUgdGhhbiB0aGUgYnJvd3NlcidzIHByb21wdCBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdIERpYWxvZyBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBQcm9tcHQpXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2J1dHRvbkxhYmVsc10gIEFycmF5IG9mIHN0cmluZ3Mgc3BlY2lmeWluZyBidXR0b24gbGFiZWxzLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIFtcIk9LXCIsXCJDYW5jZWxcIl0pXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0VGV4dF0gRGVmYXVsdCB0ZXh0IGJveCBpbnB1dCB2YWx1ZS4gIChPcHRpb25hbCwgRGVmYXVsdDogZW1wdHkgc3RyaW5nKVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPERpYWxvZ3NQcm9tcHRDYWxsYmFjaz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYW4gb2JqZWN0IHdpdGggdGhlIGJ1dHRvbiBpbmRleCBjbGlja2VkIGFuZCB0aGUgdGV4dCBlbnRlcmVkXG4gICAgICovXG4gICAgcHJvbXB0KG1lc3NhZ2U/OiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBidXR0b25MYWJlbHM/OiBzdHJpbmdbXSwgZGVmYXVsdFRleHQ/OiBzdHJpbmcpOiBQcm9taXNlPERpYWxvZ3NQcm9tcHRDYWxsYmFjaz47XG4gICAgLyoqXG4gICAgICogVGhlIGRldmljZSBwbGF5cyBhIGJlZXAgc291bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJzfSB0aW1lcyBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgYmVlcC5cbiAgICAgKi9cbiAgICBiZWVwKHRpbWVzOiBudW1iZXIpOiB2b2lkO1xufVxuIl19